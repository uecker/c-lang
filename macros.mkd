
# Macros #

Macros programming relies on extensions such as [Typeof](./typeof.mkd),
[auto](./auto.mkd), and [Statement Expressions](./stexpr.mkd).

There are still a couple of problems

1. Multi-line macros are annoying

2. Collision of variable names

```
#define foo(x)              \
({                          \
    __auto_type a = (x);    \
})

int main()
{
    int a = 1;
    foo(a);
}
```

3. Semicolons can not appear as part of arguments

```
#define min(x, y)           \
({  __auto_type _x = (x);   \
    __auto_type _y = (y);   \
    (_x < _y) ? _x : _y;    \
})
```
4. No pattern matching of expression
 
5. Compound expressions can not be used safely in macros because curly brackets are not parsed:
 ```
 foo((int[]){ 0, 0 })
 ```

6. Compound expressions can not be used safely inside [Statement Expressions](./stexpr.mkd)

Life time of a compound expressions used in a macro written using a statement
expression ends, so can not be returned.


 
 New kind of macros?
 ```
 #macro foo(x * y)
   mul(x, y)
 #endmacro
 ```

